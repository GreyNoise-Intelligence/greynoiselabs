# Generated by ariadne-codegen on 2023-06-15 23:34
# Source: queries

from .async_base_client import AsyncBaseClient
from .get_c2s import GetC2s
from .noise_rank import NoiseRank
from .top_h_t_t_p_requests import TopHTTPRequests
from .top_knocks import TopKnocks
from .top_popular_i_ps import TopPopularIPs


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def get_c2s(self) -> GetC2s:
        query = gql(
            """
            query getC2s {
              topC2s {
                queryInfo {
                  resultsAvailable
                  resultsLimit
                }
                c2s {
                  c2_domains
                  c2_ips
                  hits
                  payload
                  pervasiveness
                  source_ip
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetC2s.parse_obj(data)

    async def top_h_t_t_p_requests(self) -> TopHTTPRequests:
        query = gql(
            """
            query TopHTTPRequests {
              topHTTPRequests {
                queryInfo {
                  resultsAvailable
                  resultsLimit
                }
                httpRequests {
                  method
                  path
                  pervasiveness
                  request_count
                  request_headers
                  source_ip_count
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TopHTTPRequests.parse_obj(data)

    async def top_knocks(self, ip: str) -> TopKnocks:
        query = gql(
            """
            query TopKnocks($ip: String!) {
              topKnocks(ip: $ip) {
                queryInfo {
                  resultsAvailable
                  resultsLimit
                }
                knock {
                  tor_exit
                  title
                  source_ip
                  links
                  last_seen
                  last_crawled
                  knock_port
                  jarm
                  ips
                  headers
                  favicon_mmh3_32
                  favicon_mmh3_128
                  emails
                  apps
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"ip": ip}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TopKnocks.parse_obj(data)

    async def noise_rank(self, ip: str) -> NoiseRank:
        query = gql(
            """
            query NoiseRank($ip: String!) {
              noiseRank(ip: $ip) {
                queryInfo {
                  resultsAvailable
                  resultsLimit
                }
                ips {
                  country_pervasiveness
                  ip
                  noise_score
                  payload_diversity
                  port_diversity
                  request_rate
                  sensor_pervasiveness
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"ip": ip}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return NoiseRank.parse_obj(data)

    async def top_popular_i_ps(self) -> TopPopularIPs:
        query = gql(
            """
            query TopPopularIPs {
              topPopularIPs {
                queryInfo {
                  resultsAvailable
                  resultsLimit
                }
                popularIPs {
                  ip
                  request_count
                  users_count
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TopPopularIPs.parse_obj(data)
